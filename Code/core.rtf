{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red183\green111\blue179;\red23\green23\blue23;\red202\green202\blue202;
\red67\green192\blue160;\red212\green214\blue154;\red140\green211\blue254;\red194\green126\blue101;\red89\green138\blue67;
\red66\green179\blue255;\red167\green197\blue152;\red70\green137\blue204;\red205\green173\blue106;}
{\*\expandedcolortbl;;\cssrgb\c77255\c52549\c75294;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c30588\c78824\c69020;\cssrgb\c86275\c86275\c66667;\cssrgb\c61176\c86275\c99608;\cssrgb\c80784\c56863\c47059;\cssrgb\c41569\c60000\c33333;
\cssrgb\c30980\c75686\c100000;\cssrgb\c70980\c80784\c65882;\cssrgb\c33725\c61176\c83922;\cssrgb\c84314\c72941\c49020;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 argparse\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 asyncio\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 from\cf4 \strokec4  \cf5 \strokec5 collections\cf4 \strokec4  \cf2 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 deque\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 uvloop\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 asyncio\cf4 \strokec4 .\cf6 \strokec6 set_event_loop_policy\cf4 \strokec4 (\cf5 \strokec5 uvloop\cf4 \strokec4 .\cf5 \strokec5 EventLoopPolicy\cf4 \strokec4 ())\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 sys\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 math\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 base64\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 os\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 traceback\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 hashlib\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 aiohttp\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 aioprocessing\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 logging\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 locale\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 try\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 locale\cf4 \strokec4 .\cf6 \strokec6 setlocale\cf4 \strokec4 (\cf5 \strokec5 locale\cf4 \strokec4 .\cf7 \strokec7 LC_ALL\cf4 \strokec4 , \cf8 \strokec8 'en_US'\cf4 \strokec4 )\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 except\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 pass\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 from\cf4 \strokec4  \cf5 \strokec5 OpenSSL\cf4 \strokec4  \cf2 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 crypto\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf9 \cb3 \strokec9 # from . import certlib\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 certlib\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf10 \cb3 \strokec10 DOWNLOAD_CONCURRENCY\cf4 \strokec4  = \cf11 \strokec11 50\cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10 MAX_QUEUE_SIZE\cf4 \strokec4  = \cf11 \strokec11 1000\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf12 \cb3 \strokec12 async\cf4 \strokec4  \cf12 \strokec12 def\cf4 \strokec4  \cf6 \strokec6 download_worker\cf4 \strokec4 (\cf7 \strokec7 session\cf4 \strokec4 , \cf7 \strokec7 log_info\cf4 \strokec4 , \cf7 \strokec7 work_deque\cf4 \strokec4 , \cf7 \strokec7 download_queue\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 while\cf4 \strokec4  \cf12 \strokec12 True\cf4 \strokec4 :\cb1 \
\cb3         \cf2 \strokec2 try\cf4 \strokec4 :\cb1 \
\cb3             \cf7 \strokec7 start\cf4 \strokec4 , \cf7 \strokec7 end\cf4 \strokec4  = \cf7 \strokec7 work_deque\cf4 \strokec4 .popleft()\cb1 \
\cb3         \cf2 \strokec2 except\cf4 \strokec4  \cf5 \strokec5 IndexError\cf4 \strokec4 :\cb1 \
\cb3             \cf2 \strokec2 return\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 logging\cf4 \strokec4 .\cf6 \strokec6 debug\cf4 \strokec4 (\cf8 \strokec8 "[\cf12 \strokec12 \{\}\cf8 \strokec8 ] Queueing up blocks \cf12 \strokec12 \{\}\cf8 \strokec8 -\cf12 \strokec12 \{\}\cf8 \strokec8 ..."\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf7 \strokec7 log_info\cf4 \strokec4 [\cf8 \strokec8 'url'\cf4 \strokec4 ], \cf7 \strokec7 start\cf4 \strokec4 , \cf7 \strokec7 end\cf4 \strokec4 ))\cb1 \
\
\cb3         \cf2 \strokec2 for\cf4 \strokec4  \cf7 \strokec7 x\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 range\cf4 \strokec4 (\cf11 \strokec11 3\cf4 \strokec4 ):\cb1 \
\cb3             \cf2 \strokec2 try\cf4 \strokec4 :\cb1 \
\cb3                 \cf2 \strokec2 async\cf4 \strokec4  \cf2 \strokec2 with\cf4 \strokec4  \cf7 \strokec7 session\cf4 \strokec4 .get(\cf5 \strokec5 certlib\cf4 \strokec4 .\cf7 \strokec7 DOWNLOAD\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf7 \strokec7 log_info\cf4 \strokec4 [\cf8 \strokec8 'url'\cf4 \strokec4 ], \cf7 \strokec7 start\cf4 \strokec4 , \cf7 \strokec7 end\cf4 \strokec4 )) \cf2 \strokec2 as\cf4 \strokec4  \cf7 \strokec7 response\cf4 \strokec4 :\cb1 \
\cb3                     \cf7 \strokec7 entry_list\cf4 \strokec4  = \cf2 \strokec2 await\cf4 \strokec4  \cf7 \strokec7 response\cf4 \strokec4 .json()\cb1 \
\cb3                     \cf5 \strokec5 logging\cf4 \strokec4 .\cf6 \strokec6 debug\cf4 \strokec4 (\cf8 \strokec8 "[\cf12 \strokec12 \{\}\cf8 \strokec8 ] Retrieved blocks \cf12 \strokec12 \{\}\cf8 \strokec8 -\cf12 \strokec12 \{\}\cf8 \strokec8 ..."\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf7 \strokec7 log_info\cf4 \strokec4 [\cf8 \strokec8 'url'\cf4 \strokec4 ], \cf7 \strokec7 start\cf4 \strokec4 , \cf7 \strokec7 end\cf4 \strokec4 ))\cb1 \
\cb3                     \cf2 \strokec2 break\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 except\cf4 \strokec4  \cf5 \strokec5 Exception\cf4 \strokec4  \cf2 \strokec2 as\cf4 \strokec4  \cf7 \strokec7 e\cf4 \strokec4 :\cb1 \
\cb3                 \cf5 \strokec5 logging\cf4 \strokec4 .\cf6 \strokec6 error\cf4 \strokec4 (\cf8 \strokec8 "Exception getting block \cf12 \strokec12 \{\}\cf8 \strokec8 -\cf12 \strokec12 \{\}\cf8 \strokec8 ! \cf12 \strokec12 \{\}\cf8 \strokec8 "\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf7 \strokec7 start\cf4 \strokec4 , \cf7 \strokec7 end\cf4 \strokec4 , \cf7 \strokec7 e\cf4 \strokec4 ))\cb1 \
\cb3         \cf2 \strokec2 else\cf4 \strokec4 :  \cf9 \strokec9 # Notorious for else, if we didn't encounter a break our request failed 3 times D:\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 with\cf4 \strokec4  \cf6 \strokec6 open\cf4 \strokec4 (\cf8 \strokec8 '/tmp/fails.csv'\cf4 \strokec4 , \cf8 \strokec8 'a'\cf4 \strokec4 ) \cf2 \strokec2 as\cf4 \strokec4  \cf7 \strokec7 f\cf4 \strokec4 :\cb1 \
\cb3                 \cf7 \strokec7 f\cf4 \strokec4 .\cf6 \strokec6 write\cf4 \strokec4 (\cf8 \strokec8 ","\cf4 \strokec4 .\cf6 \strokec6 join\cf4 \strokec4 ([\cf7 \strokec7 log_info\cf4 \strokec4 [\cf8 \strokec8 'url'\cf4 \strokec4 ], \cf5 \strokec5 str\cf4 \strokec4 (\cf7 \strokec7 start\cf4 \strokec4 ), \cf5 \strokec5 str\cf4 \strokec4 (\cf7 \strokec7 end\cf4 \strokec4 )]))\cb1 \
\cb3             \cf2 \strokec2 return\cf4 \cb1 \strokec4 \
\
\cb3         \cf2 \strokec2 for\cf4 \strokec4  \cf7 \strokec7 index\cf4 \strokec4 , \cf7 \strokec7 entry\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 zip\cf4 \strokec4 (\cf5 \strokec5 range\cf4 \strokec4 (\cf7 \strokec7 start\cf4 \strokec4 , \cf7 \strokec7 end\cf4 \strokec4  + \cf11 \strokec11 1\cf4 \strokec4 ), \cf7 \strokec7 entry_list\cf4 \strokec4 [\cf8 \strokec8 'entries'\cf4 \strokec4 ]):\cb1 \
\cb3             \cf7 \strokec7 entry\cf4 \strokec4 [\cf8 \strokec8 'cert_index'\cf4 \strokec4 ] = \cf7 \strokec7 index\cf4 \cb1 \strokec4 \
\
\cb3         \cf2 \strokec2 await\cf4 \strokec4  \cf7 \strokec7 download_queue\cf4 \strokec4 .put(\{\cb1 \
\cb3             \cf8 \strokec8 "entries"\cf4 \strokec4 : \cf7 \strokec7 entry_list\cf4 \strokec4 [\cf8 \strokec8 'entries'\cf4 \strokec4 ],\cb1 \
\cb3             \cf8 \strokec8 "log_info"\cf4 \strokec4 : \cf7 \strokec7 log_info\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 "start"\cf4 \strokec4 : \cf7 \strokec7 start\cf4 \strokec4 ,\cb1 \
\cb3             \cf8 \strokec8 "end"\cf4 \strokec4 : \cf7 \strokec7 end\cf4 \cb1 \strokec4 \
\cb3         \})\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf12 \cb3 \strokec12 async\cf4 \strokec4  \cf12 \strokec12 def\cf4 \strokec4  \cf6 \strokec6 queue_monitor\cf4 \strokec4 (\cf7 \strokec7 log_info\cf4 \strokec4 , \cf7 \strokec7 work_deque\cf4 \strokec4 , \cf7 \strokec7 download_results_queue\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf7 \strokec7 total_size\cf4 \strokec4  = \cf7 \strokec7 log_info\cf4 \strokec4 [\cf8 \strokec8 'tree_size'\cf4 \strokec4 ] - \cf11 \strokec11 1\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 total_blocks\cf4 \strokec4  = \cf5 \strokec5 math\cf4 \strokec4 .\cf6 \strokec6 ceil\cf4 \strokec4 (\cf7 \strokec7 total_size\cf4 \strokec4  / \cf7 \strokec7 log_info\cf4 \strokec4 [\cf8 \strokec8 'block_size'\cf4 \strokec4 ])\cb1 \
\
\cb3     \cf2 \strokec2 while\cf4 \strokec4  \cf12 \strokec12 True\cf4 \strokec4 :\cb1 \
\cb3         \cf5 \strokec5 logging\cf4 \strokec4 .\cf6 \strokec6 info\cf4 \strokec4 (\cf8 \strokec8 "Queue Status: Processing Queue Size:\cf12 \strokec12 \{3\}\cf8 \strokec8  Downloaded blocks:\cf12 \strokec12 \{0\}\cf8 \strokec8 /\cf12 \strokec12 \{1\}\cf8 \strokec8  (\cf12 \strokec12 \{2:.4f\}\cf8 \strokec8 %)"\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cb1 \
\cb3             \cf7 \strokec7 total_blocks\cf4 \strokec4  - \cf6 \strokec6 len\cf4 \strokec4 (\cf7 \strokec7 work_deque\cf4 \strokec4 ),\cb1 \
\cb3             \cf7 \strokec7 total_blocks\cf4 \strokec4 ,\cb1 \
\cb3             ((\cf7 \strokec7 total_blocks\cf4 \strokec4  - \cf6 \strokec6 len\cf4 \strokec4 (\cf7 \strokec7 work_deque\cf4 \strokec4 )) / \cf7 \strokec7 total_blocks\cf4 \strokec4 ) * \cf11 \strokec11 100\cf4 \strokec4 ,\cb1 \
\cb3             \cf6 \strokec6 len\cf4 \strokec4 (\cf7 \strokec7 download_results_queue\cf4 \strokec4 ._queue),\cb1 \
\cb3         ))\cb1 \
\cb3         \cf2 \strokec2 await\cf4 \strokec4  \cf5 \strokec5 asyncio\cf4 \strokec4 .\cf6 \strokec6 sleep\cf4 \strokec4 (\cf11 \strokec11 2\cf4 \strokec4 )\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf12 \cb3 \strokec12 async\cf4 \strokec4  \cf12 \strokec12 def\cf4 \strokec4  \cf6 \strokec6 retrieve_certificates\cf4 \strokec4 (\cf7 \strokec7 loop\cf4 \strokec4 , \cf7 \strokec7 url\cf4 \strokec4 =\cf12 \strokec12 None\cf4 \strokec4 , \cf7 \strokec7 ctl_offset\cf4 \strokec4 =\cf11 \strokec11 0\cf4 \strokec4 , \cf7 \strokec7 output_directory\cf4 \strokec4 =\cf8 \strokec8 '/Users/bricelewis/Desktop/test.txt'\cf4 \strokec4 , \cf7 \strokec7 concurrency_count\cf4 \strokec4 =\cf10 \strokec10 DOWNLOAD_CONCURRENCY\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 async\cf4 \strokec4  \cf2 \strokec2 with\cf4 \strokec4  \cf5 \strokec5 aiohttp\cf4 \strokec4 .\cf5 \strokec5 ClientSession\cf4 \strokec4 (\cf7 \strokec7 loop\cf4 \strokec4 =\cf7 \strokec7 loop\cf4 \strokec4 , \cf7 \strokec7 conn_timeout\cf4 \strokec4 =\cf11 \strokec11 10\cf4 \strokec4 ) \cf2 \strokec2 as\cf4 \strokec4  \cf7 \strokec7 session\cf4 \strokec4 :\cb1 \
\cb3         \cf7 \strokec7 ctl_logs\cf4 \strokec4  = \cf2 \strokec2 await\cf4 \strokec4  \cf5 \strokec5 certlib\cf4 \strokec4 .\cf6 \strokec6 retrieve_all_ctls\cf4 \strokec4 (\cf7 \strokec7 session\cf4 \strokec4 )\cb1 \
\
\cb3         \cf2 \strokec2 if\cf4 \strokec4  \cf7 \strokec7 url\cf4 \strokec4 :\cb1 \
\cb3             \cf7 \strokec7 url\cf4 \strokec4  = \cf7 \strokec7 url\cf4 \strokec4 .strip(\cf8 \strokec8 "'"\cf4 \strokec4 )\cb1 \
\
\cb3         \cf2 \strokec2 for\cf4 \strokec4  \cf7 \strokec7 log\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf7 \strokec7 ctl_logs\cf4 \strokec4 :\cb1 \
\cb3             \cf2 \strokec2 if\cf4 \strokec4  \cf7 \strokec7 url\cf4 \strokec4  \cf12 \strokec12 and\cf4 \strokec4  \cf7 \strokec7 url\cf4 \strokec4  \cf12 \strokec12 not\cf4 \strokec4  \cf12 \strokec12 in\cf4 \strokec4  \cf7 \strokec7 log\cf4 \strokec4 [\cf8 \strokec8 'url'\cf4 \strokec4 ]:\cb1 \
\cb3                 \cf2 \strokec2 continue\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 work_deque\cf4 \strokec4  = \cf5 \strokec5 deque\cf4 \strokec4 ()\cb1 \
\cb3             \cf7 \strokec7 download_results_queue\cf4 \strokec4  = \cf5 \strokec5 asyncio\cf4 \strokec4 .\cf5 \strokec5 Queue\cf4 \strokec4 (\cf7 \strokec7 maxsize\cf4 \strokec4 =\cf10 \strokec10 MAX_QUEUE_SIZE\cf4 \strokec4 )\cb1 \
\
\cb3             \cf5 \strokec5 logging\cf4 \strokec4 .\cf6 \strokec6 info\cf4 \strokec4 (\cf8 \strokec8 "Downloading certificates for \cf12 \strokec12 \{\}\cf8 \strokec8 "\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf7 \strokec7 log\cf4 \strokec4 [\cf8 \strokec8 'description'\cf4 \strokec4 ]))\cb1 \
\cb3             \cf2 \strokec2 try\cf4 \strokec4 :\cb1 \
\cb3                 \cf7 \strokec7 log_info\cf4 \strokec4  = \cf2 \strokec2 await\cf4 \strokec4  \cf5 \strokec5 certlib\cf4 \strokec4 .\cf6 \strokec6 retrieve_log_info\cf4 \strokec4 (\cf7 \strokec7 log\cf4 \strokec4 , \cf7 \strokec7 session\cf4 \strokec4 )\cb1 \
\cb3             \cf2 \strokec2 except\cf4 \strokec4  (\cf5 \strokec5 aiohttp\cf4 \strokec4 .\cf5 \strokec5 ClientConnectorError\cf4 \strokec4 , \cf5 \strokec5 aiohttp\cf4 \strokec4 .\cf5 \strokec5 ServerTimeoutError\cf4 \strokec4 , \cf5 \strokec5 aiohttp\cf4 \strokec4 .\cf5 \strokec5 ClientOSError\cf4 \strokec4 , \cf5 \strokec5 aiohttp\cf4 \strokec4 .\cf5 \strokec5 ClientResponseError\cf4 \strokec4 ) \cf2 \strokec2 as\cf4 \strokec4  \cf7 \strokec7 e\cf4 \strokec4 :\cb1 \
\cb3                 \cf5 \strokec5 logging\cf4 \strokec4 .\cf6 \strokec6 error\cf4 \strokec4 (\cf8 \strokec8 "Failed to connect to CTL! -> \cf12 \strokec12 \{\}\cf8 \strokec8  - skipping."\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf7 \strokec7 e\cf4 \strokec4 ))\cb1 \
\cb3                 \cf2 \strokec2 continue\cf4 \cb1 \strokec4 \
\
\cb3             \cf2 \strokec2 try\cf4 \strokec4 :\cb1 \
\cb3                 \cf2 \strokec2 await\cf4 \strokec4  \cf5 \strokec5 certlib\cf4 \strokec4 .\cf6 \strokec6 populate_work\cf4 \strokec4 (\cf7 \strokec7 work_deque\cf4 \strokec4 , \cf7 \strokec7 log_info\cf4 \strokec4 , \cf7 \strokec7 start\cf4 \strokec4 =\cf7 \strokec7 ctl_offset\cf4 \strokec4 )\cb1 \
\cb3             \cf2 \strokec2 except\cf4 \strokec4  \cf5 \strokec5 Exception\cf4 \strokec4  \cf2 \strokec2 as\cf4 \strokec4  \cf7 \strokec7 e\cf4 \strokec4 :\cb1 \
\cb3                 \cf5 \strokec5 logging\cf4 \strokec4 .\cf6 \strokec6 error\cf4 \strokec4 (\cf8 \strokec8 "Log needs no update - \cf12 \strokec12 \{\}\cf8 \strokec8 "\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf7 \strokec7 e\cf4 \strokec4 ))\cb1 \
\cb3                 \cf2 \strokec2 continue\cf4 \cb1 \strokec4 \
\
\cb3             \cf7 \strokec7 download_tasks\cf4 \strokec4  = \cf5 \strokec5 asyncio\cf4 \strokec4 .\cf6 \strokec6 gather\cf4 \strokec4 (*[\cb1 \
\cb3                 \cf6 \strokec6 download_worker\cf4 \strokec4 (\cf7 \strokec7 session\cf4 \strokec4 , \cf7 \strokec7 log_info\cf4 \strokec4 , \cf7 \strokec7 work_deque\cf4 \strokec4 , \cf7 \strokec7 download_results_queue\cf4 \strokec4 )\cb1 \
\cb3                 \cf2 \strokec2 for\cf4 \strokec4  \cf7 \strokec7 _\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 range\cf4 \strokec4 (\cf7 \strokec7 concurrency_count\cf4 \strokec4 )\cb1 \
\cb3             ])\cb1 \
\
\cb3             \cf7 \strokec7 processing_task\cf4 \strokec4     = \cf5 \strokec5 asyncio\cf4 \strokec4 .\cf6 \strokec6 ensure_future\cf4 \strokec4 (\cf6 \strokec6 processing_coro\cf4 \strokec4 (\cf7 \strokec7 download_results_queue\cf4 \strokec4 , \cf7 \strokec7 output_dir\cf4 \strokec4 =\cf7 \strokec7 output_directory\cf4 \strokec4 ))\cb1 \
\cb3             \cf7 \strokec7 queue_monitor_task\cf4 \strokec4  = \cf5 \strokec5 asyncio\cf4 \strokec4 .\cf6 \strokec6 ensure_future\cf4 \strokec4 (\cf6 \strokec6 queue_monitor\cf4 \strokec4 (\cf7 \strokec7 log_info\cf4 \strokec4 , \cf7 \strokec7 work_deque\cf4 \strokec4 , \cf7 \strokec7 download_results_queue\cf4 \strokec4 ))\cb1 \
\
\cb3             \cf5 \strokec5 asyncio\cf4 \strokec4 .\cf6 \strokec6 ensure_future\cf4 \strokec4 (\cf7 \strokec7 download_tasks\cf4 \strokec4 )\cb1 \
\
\cb3             \cf2 \strokec2 await\cf4 \strokec4  \cf7 \strokec7 download_tasks\cf4 \cb1 \strokec4 \
\
\cb3             \cf2 \strokec2 await\cf4 \strokec4  \cf7 \strokec7 download_results_queue\cf4 \strokec4 .\cf6 \strokec6 put\cf4 \strokec4 (\cf12 \strokec12 None\cf4 \strokec4 ) \cf9 \strokec9 # Downloads are done, processing can stop\cf4 \cb1 \strokec4 \
\
\cb3             \cf2 \strokec2 await\cf4 \strokec4  \cf7 \strokec7 processing_task\cf4 \cb1 \strokec4 \
\
\cb3             \cf7 \strokec7 queue_monitor_task\cf4 \strokec4 .\cf6 \strokec6 cancel\cf4 \strokec4 ()\cb1 \
\
\cb3             \cf5 \strokec5 logging\cf4 \strokec4 .\cf6 \strokec6 info\cf4 \strokec4 (\cf8 \strokec8 "Completed \cf12 \strokec12 \{\}\cf8 \strokec8 , stored at \cf12 \strokec12 \{\}\cf8 \strokec8 !"\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cb1 \
\cb3                 \cf7 \strokec7 log_info\cf4 \strokec4 [\cf8 \strokec8 'description'\cf4 \strokec4 ],\cb1 \
\cb3                 \cf8 \strokec8 '/tmp/\cf12 \strokec12 \{\}\cf8 \strokec8 .csv'\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf7 \strokec7 log_info\cf4 \strokec4 [\cf8 \strokec8 'url'\cf4 \strokec4 ].replace(\cf8 \strokec8 '/'\cf4 \strokec4 , \cf8 \strokec8 '_'\cf4 \strokec4 ))\cb1 \
\cb3             ))\cb1 \
\
\cb3             \cf5 \strokec5 logging\cf4 \strokec4 .\cf6 \strokec6 info\cf4 \strokec4 (\cf8 \strokec8 "Finished downloading and processing \cf12 \strokec12 \{\}\cf8 \strokec8 "\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf7 \strokec7 log_info\cf4 \strokec4 [\cf8 \strokec8 'url'\cf4 \strokec4 ]))\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf12 \cb3 \strokec12 async\cf4 \strokec4  \cf12 \strokec12 def\cf4 \strokec4  \cf6 \strokec6 processing_coro\cf4 \strokec4 (\cf7 \strokec7 download_results_queue\cf4 \strokec4 , \cf7 \strokec7 output_dir\cf4 \strokec4 =\cf8 \strokec8 "/Users/bricelewis/Desktop/Certificats"\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 logging\cf4 \strokec4 .\cf6 \strokec6 info\cf4 \strokec4 (\cf8 \strokec8 "Starting processing coro and process pool"\cf4 \strokec4 )\cb1 \
\cb3     \cf7 \strokec7 process_pool\cf4 \strokec4  = \cf5 \strokec5 aioprocessing\cf4 \strokec4 .\cf6 \strokec6 AioPool\cf4 \strokec4 (\cf7 \strokec7 initargs\cf4 \strokec4 =(\cf7 \strokec7 output_dir\cf4 \strokec4 ,))\cb1 \
\
\cb3     \cf7 \strokec7 done\cf4 \strokec4  = \cf12 \strokec12 False\cf4 \cb1 \strokec4 \
\
\cb3     \cf2 \strokec2 while\cf4 \strokec4  \cf12 \strokec12 True\cf4 \strokec4 :\cb1 \
\cb3         \cf7 \strokec7 entries_iter\cf4 \strokec4  = []\cb1 \
\cb3         \cf5 \strokec5 logging\cf4 \strokec4 .\cf6 \strokec6 info\cf4 \strokec4 (\cf8 \strokec8 "Getting things to process..."\cf4 \strokec4 )\cb1 \
\cb3         \cf2 \strokec2 for\cf4 \strokec4  \cf7 \strokec7 _\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 range\cf4 \strokec4 (\cf5 \strokec5 int\cf4 \strokec4 (\cf7 \strokec7 process_pool\cf4 \strokec4 .pool_workers)):\cb1 \
\cb3             \cf7 \strokec7 entries\cf4 \strokec4  = \cf2 \strokec2 await\cf4 \strokec4  \cf7 \strokec7 download_results_queue\cf4 \strokec4 .get()\cb1 \
\cb3             \cf2 \strokec2 if\cf4 \strokec4  \cf7 \strokec7 entries\cf4 \strokec4  != \cf12 \strokec12 None\cf4 \strokec4 :\cb1 \
\cb3                 \cf7 \strokec7 entries_iter\cf4 \strokec4 .\cf6 \strokec6 append\cf4 \strokec4 (\cf7 \strokec7 entries\cf4 \strokec4 )\cb1 \
\cb3             \cf2 \strokec2 else\cf4 \strokec4 :\cb1 \
\cb3                 \cf7 \strokec7 done\cf4 \strokec4  = \cf12 \strokec12 True\cf4 \cb1 \strokec4 \
\cb3                 \cf2 \strokec2 break\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 logging\cf4 \strokec4 .\cf6 \strokec6 debug\cf4 \strokec4 (\cf8 \strokec8 "Got a chunk of \cf12 \strokec12 \{\}\cf8 \strokec8 . Mapping into process pool"\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf7 \strokec7 process_pool\cf4 \strokec4 .pool_workers))\cb1 \
\
\
\cb3         \cf2 \strokec2 for\cf4 \strokec4  \cf7 \strokec7 entry\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf7 \strokec7 entries_iter\cf4 \strokec4 :\cb1 \
\cb3             \cf7 \strokec7 csv_storage\cf4 \strokec4  = \cf8 \strokec8 '\cf12 \strokec12 \{\}\cf8 \strokec8 /certificates/\cf12 \strokec12 \{\}\cf8 \strokec8 '\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf7 \strokec7 output_dir\cf4 \strokec4 , \cf7 \strokec7 entry\cf4 \strokec4 [\cf8 \strokec8 'log_info'\cf4 \strokec4 ][\cf8 \strokec8 'url'\cf4 \strokec4 ].replace(\cf8 \strokec8 '/'\cf4 \strokec4 , \cf8 \strokec8 '_'\cf4 \strokec4 ))\cb1 \
\cb3             \cf2 \strokec2 if\cf4 \strokec4  \cf12 \strokec12 not\cf4 \strokec4  \cf5 \strokec5 os\cf4 \strokec4 .\cf7 \strokec7 path\cf4 \strokec4 .\cf6 \strokec6 exists\cf4 \strokec4 (\cf7 \strokec7 csv_storage\cf4 \strokec4 ):\cb1 \
\cb3                 \cf6 \strokec6 print\cf4 \strokec4 (\cf8 \strokec8 "[\cf12 \strokec12 \{\}\cf8 \strokec8 ] Making dir..."\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf5 \strokec5 os\cf4 \strokec4 .\cf6 \strokec6 getpid\cf4 \strokec4 ()))\cb1 \
\cb3                 \cf5 \strokec5 os\cf4 \strokec4 .\cf6 \strokec6 makedirs\cf4 \strokec4 (\cf7 \strokec7 csv_storage\cf4 \strokec4 )\cb1 \
\cb3             \cf7 \strokec7 entry\cf4 \strokec4 [\cf8 \strokec8 'log_dir'\cf4 \strokec4 ]=\cf7 \strokec7 csv_storage\cf4 \cb1 \strokec4 \
\
\cb3         \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 len\cf4 \strokec4 (\cf7 \strokec7 entries_iter\cf4 \strokec4 ) > \cf11 \strokec11 0\cf4 \strokec4 :\cb1 \
\cb3             \cf2 \strokec2 await\cf4 \strokec4  \cf7 \strokec7 process_pool\cf4 \strokec4 .\cf6 \strokec6 coro_map\cf4 \strokec4 (\cf6 \strokec6 process_worker\cf4 \strokec4 , \cf7 \strokec7 entries_iter\cf4 \strokec4 )\cb1 \
\
\cb3         \cf5 \strokec5 logging\cf4 \strokec4 .\cf6 \strokec6 debug\cf4 \strokec4 (\cf8 \strokec8 "Done mapping! Got results"\cf4 \strokec4 )\cb1 \
\
\cb3         \cf2 \strokec2 if\cf4 \strokec4  \cf7 \strokec7 done\cf4 \strokec4 :\cb1 \
\cb3             \cf2 \strokec2 break\cf4 \cb1 \strokec4 \
\
\cb3     \cf7 \strokec7 process_pool\cf4 \strokec4 .close()\cb1 \
\
\cb3     \cf2 \strokec2 await\cf4 \strokec4  \cf7 \strokec7 process_pool\cf4 \strokec4 .coro_join()\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf12 \cb3 \strokec12 def\cf4 \strokec4  \cf6 \strokec6 process_worker\cf4 \strokec4 (\cf7 \strokec7 result_info\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 logging\cf4 \strokec4 .\cf6 \strokec6 debug\cf4 \strokec4 (\cf8 \strokec8 "Worker \cf12 \strokec12 \{\}\cf8 \strokec8  starting..."\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf5 \strokec5 os\cf4 \strokec4 .\cf6 \strokec6 getpid\cf4 \strokec4 ()))\cb1 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf12 \strokec12 not\cf4 \strokec4  \cf7 \strokec7 result_info\cf4 \strokec4 :\cb1 \
\cb3         \cf2 \strokec2 return\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 try\cf4 \strokec4 :\cb1 \
\cb3         \cf7 \strokec7 csv_storage\cf4 \strokec4  = \cf7 \strokec7 result_info\cf4 \strokec4 [\cf8 \strokec8 'log_dir'\cf4 \strokec4 ]\cb1 \
\cb3         \cf7 \strokec7 csv_file\cf4 \strokec4  = \cf8 \strokec8 "\cf12 \strokec12 \{\}\cf8 \strokec8 /\cf12 \strokec12 \{\}\cf8 \strokec8 -\cf12 \strokec12 \{\}\cf8 \strokec8 .csv"\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf7 \strokec7 csv_storage\cf4 \strokec4 , \cf7 \strokec7 result_info\cf4 \strokec4 [\cf8 \strokec8 'start'\cf4 \strokec4 ], \cf7 \strokec7 result_info\cf4 \strokec4 [\cf8 \strokec8 'end'\cf4 \strokec4 ])\cb1 \
\
\cb3         \cf7 \strokec7 lines\cf4 \strokec4  = []\cb1 \
\
\cb3         \cf6 \strokec6 print\cf4 \strokec4 (\cf8 \strokec8 "[\cf12 \strokec12 \{\}\cf8 \strokec8 ] Parsing..."\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf5 \strokec5 os\cf4 \strokec4 .\cf6 \strokec6 getpid\cf4 \strokec4 ()))\cb1 \
\cb3         \cf2 \strokec2 for\cf4 \strokec4  \cf7 \strokec7 entry\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf7 \strokec7 result_info\cf4 \strokec4 [\cf8 \strokec8 'entries'\cf4 \strokec4 ]:\cb1 \
\cb3             \cf7 \strokec7 mtl\cf4 \strokec4  = \cf5 \strokec5 certlib\cf4 \strokec4 .\cf7 \strokec7 MerkleTreeHeader\cf4 \strokec4 .\cf6 \strokec6 parse\cf4 \strokec4 (\cf5 \strokec5 base64\cf4 \strokec4 .\cf6 \strokec6 b64decode\cf4 \strokec4 (\cf7 \strokec7 entry\cf4 \strokec4 [\cf8 \strokec8 'leaf_input'\cf4 \strokec4 ]))\cb1 \
\
\cb3             \cf7 \strokec7 cert_data\cf4 \strokec4  = \{\}\cb1 \
\
\cb3             \cf2 \strokec2 if\cf4 \strokec4  \cf7 \strokec7 mtl\cf4 \strokec4 .LogEntryType == \cf8 \strokec8 "X509LogEntryType"\cf4 \strokec4 :\cb1 \
\cb3                 \cf7 \strokec7 cert_data\cf4 \strokec4 [\cf8 \strokec8 'type'\cf4 \strokec4 ] = \cf8 \strokec8 "X509LogEntry"\cf4 \cb1 \strokec4 \
\cb3                 \cf7 \strokec7 chain\cf4 \strokec4  = [\cf5 \strokec5 crypto\cf4 \strokec4 .\cf6 \strokec6 load_certificate\cf4 \strokec4 (\cf5 \strokec5 crypto\cf4 \strokec4 .\cf7 \strokec7 FILETYPE_ASN1\cf4 \strokec4 , \cf5 \strokec5 certlib\cf4 \strokec4 .\cf7 \strokec7 Certificate\cf4 \strokec4 .\cf6 \strokec6 parse\cf4 \strokec4 (\cf7 \strokec7 mtl\cf4 \strokec4 .Entry).CertData)]\cb1 \
\cb3                 \cf7 \strokec7 extra_data\cf4 \strokec4  = \cf5 \strokec5 certlib\cf4 \strokec4 .\cf7 \strokec7 CertificateChain\cf4 \strokec4 .\cf6 \strokec6 parse\cf4 \strokec4 (\cf5 \strokec5 base64\cf4 \strokec4 .\cf6 \strokec6 b64decode\cf4 \strokec4 (\cf7 \strokec7 entry\cf4 \strokec4 [\cf8 \strokec8 'extra_data'\cf4 \strokec4 ]))\cb1 \
\cb3                 \cf2 \strokec2 for\cf4 \strokec4  \cf7 \strokec7 cert\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf7 \strokec7 extra_data\cf4 \strokec4 .Chain:\cb1 \
\cb3                     \cf7 \strokec7 chain\cf4 \strokec4 .\cf6 \strokec6 append\cf4 \strokec4 (\cf5 \strokec5 crypto\cf4 \strokec4 .\cf6 \strokec6 load_certificate\cf4 \strokec4 (\cf5 \strokec5 crypto\cf4 \strokec4 .\cf7 \strokec7 FILETYPE_ASN1\cf4 \strokec4 , \cf7 \strokec7 cert\cf4 \strokec4 .CertData))\cb1 \
\cb3             \cf2 \strokec2 else\cf4 \strokec4 :\cb1 \
\cb3                 \cf7 \strokec7 cert_data\cf4 \strokec4 [\cf8 \strokec8 'type'\cf4 \strokec4 ] = \cf8 \strokec8 "PreCertEntry"\cf4 \cb1 \strokec4 \
\cb3                 \cf7 \strokec7 extra_data\cf4 \strokec4  = \cf5 \strokec5 certlib\cf4 \strokec4 .\cf7 \strokec7 PreCertEntry\cf4 \strokec4 .\cf6 \strokec6 parse\cf4 \strokec4 (\cf5 \strokec5 base64\cf4 \strokec4 .\cf6 \strokec6 b64decode\cf4 \strokec4 (\cf7 \strokec7 entry\cf4 \strokec4 [\cf8 \strokec8 'extra_data'\cf4 \strokec4 ]))\cb1 \
\cb3                 \cf7 \strokec7 chain\cf4 \strokec4  = [\cf5 \strokec5 crypto\cf4 \strokec4 .\cf6 \strokec6 load_certificate\cf4 \strokec4 (\cf5 \strokec5 crypto\cf4 \strokec4 .\cf7 \strokec7 FILETYPE_ASN1\cf4 \strokec4 , \cf7 \strokec7 extra_data\cf4 \strokec4 .LeafCert.CertData)]\cb1 \
\
\cb3                 \cf2 \strokec2 for\cf4 \strokec4  \cf7 \strokec7 cert\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf7 \strokec7 extra_data\cf4 \strokec4 .Chain:\cb1 \
\cb3                     \cf7 \strokec7 chain\cf4 \strokec4 .\cf6 \strokec6 append\cf4 \strokec4 (\cb1 \
\cb3                         \cf5 \strokec5 crypto\cf4 \strokec4 .\cf6 \strokec6 load_certificate\cf4 \strokec4 (\cf5 \strokec5 crypto\cf4 \strokec4 .\cf7 \strokec7 FILETYPE_ASN1\cf4 \strokec4 , \cf7 \strokec7 cert\cf4 \strokec4 .CertData)\cb1 \
\cb3                     )\cb1 \
\
\cb3             \cf7 \strokec7 cert_data\cf4 \strokec4 .\cf6 \strokec6 update\cf4 \strokec4 (\{\cb1 \
\cb3                 \cf8 \strokec8 "leaf_cert"\cf4 \strokec4 : \cf5 \strokec5 certlib\cf4 \strokec4 .\cf6 \strokec6 dump_cert\cf4 \strokec4 (\cf7 \strokec7 chain\cf4 \strokec4 [\cf11 \strokec11 0\cf4 \strokec4 ]),\cb1 \
\cb3                 \cf8 \strokec8 "chain"\cf4 \strokec4 : [\cf5 \strokec5 certlib\cf4 \strokec4 .\cf6 \strokec6 dump_cert\cf4 \strokec4 (\cf7 \strokec7 x\cf4 \strokec4 ) \cf2 \strokec2 for\cf4 \strokec4  \cf7 \strokec7 x\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf7 \strokec7 chain\cf4 \strokec4 [\cf11 \strokec11 1\cf4 \strokec4 :]]\cb1 \
\cb3             \})\cb1 \
\
\cb3             \cf5 \strokec5 certlib\cf4 \strokec4 .\cf6 \strokec6 add_all_domains\cf4 \strokec4 (\cf7 \strokec7 cert_data\cf4 \strokec4 )\cb1 \
\
\cb3             \cf7 \strokec7 cert_data\cf4 \strokec4 [\cf8 \strokec8 'source'\cf4 \strokec4 ] = \{\cb1 \
\cb3                 \cf8 \strokec8 "url"\cf4 \strokec4 : \cf7 \strokec7 result_info\cf4 \strokec4 [\cf8 \strokec8 'log_info'\cf4 \strokec4 ][\cf8 \strokec8 'url'\cf4 \strokec4 ],\cb1 \
\cb3             \}\cb1 \
\
\cb3             \cf7 \strokec7 chain_hash\cf4 \strokec4  = \cf5 \strokec5 hashlib\cf4 \strokec4 .\cf6 \strokec6 sha256\cf4 \strokec4 (\cf8 \strokec8 ""\cf4 \strokec4 .\cf6 \strokec6 join\cf4 \strokec4 ([\cf7 \strokec7 x\cf4 \strokec4 [\cf8 \strokec8 'as_der'\cf4 \strokec4 ] \cf2 \strokec2 for\cf4 \strokec4  \cf7 \strokec7 x\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf7 \strokec7 cert_data\cf4 \strokec4 [\cf8 \strokec8 'chain'\cf4 \strokec4 ]]).\cf6 \strokec6 encode\cf4 \strokec4 (\cf8 \strokec8 'ascii'\cf4 \strokec4 )).\cf6 \strokec6 hexdigest\cf4 \strokec4 ()\cb1 \
\
\cb3             \cf9 \strokec9 # header = "url, cert_index, chain_hash, cert_der, all_domains, not_before, not_after"\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 lines\cf4 \strokec4 .\cf6 \strokec6 append\cf4 \strokec4 (\cb1 \
\cb3                 \cf8 \strokec8 ","\cf4 \strokec4 .\cf6 \strokec6 join\cf4 \strokec4 ([\cb1 \
\cb3                     \cf7 \strokec7 result_info\cf4 \strokec4 [\cf8 \strokec8 'log_info'\cf4 \strokec4 ][\cf8 \strokec8 'url'\cf4 \strokec4 ],\cb1 \
\cb3                     \cf5 \strokec5 str\cf4 \strokec4 (\cf7 \strokec7 entry\cf4 \strokec4 [\cf8 \strokec8 'cert_index'\cf4 \strokec4 ]),\cb1 \
\cb3                     \cf7 \strokec7 chain_hash\cf4 \strokec4 ,\cb1 \
\cb3                     \cf7 \strokec7 cert_data\cf4 \strokec4 [\cf8 \strokec8 'leaf_cert'\cf4 \strokec4 ][\cf8 \strokec8 'as_der'\cf4 \strokec4 ],\cb1 \
\cb3                     \cf8 \strokec8 ' '\cf4 \strokec4 .\cf6 \strokec6 join\cf4 \strokec4 (\cf7 \strokec7 cert_data\cf4 \strokec4 [\cf8 \strokec8 'leaf_cert'\cf4 \strokec4 ][\cf8 \strokec8 'all_domains'\cf4 \strokec4 ]),\cb1 \
\cb3                     \cf5 \strokec5 str\cf4 \strokec4 (\cf7 \strokec7 cert_data\cf4 \strokec4 [\cf8 \strokec8 'leaf_cert'\cf4 \strokec4 ][\cf8 \strokec8 'not_before'\cf4 \strokec4 ]),\cb1 \
\cb3                     \cf5 \strokec5 str\cf4 \strokec4 (\cf7 \strokec7 cert_data\cf4 \strokec4 [\cf8 \strokec8 'leaf_cert'\cf4 \strokec4 ][\cf8 \strokec8 'not_after'\cf4 \strokec4 ])\cb1 \
\cb3                 ]) + \cf8 \strokec8 "\cf13 \strokec13 \\n\cf8 \strokec8 "\cf4 \cb1 \strokec4 \
\cb3             )\cb1 \
\
\cb3         \cf6 \strokec6 print\cf4 \strokec4 (\cf8 \strokec8 "[\cf12 \strokec12 \{\}\cf8 \strokec8 ] Finished, writing CSV..."\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf5 \strokec5 os\cf4 \strokec4 .\cf6 \strokec6 getpid\cf4 \strokec4 ()))\cb1 \
\
\cb3         \cf2 \strokec2 with\cf4 \strokec4  \cf6 \strokec6 open\cf4 \strokec4 (\cf7 \strokec7 csv_file\cf4 \strokec4 , \cf8 \strokec8 'w'\cf4 \strokec4 , \cf7 \strokec7 encoding\cf4 \strokec4 =\cf8 \strokec8 'utf8'\cf4 \strokec4 ) \cf2 \strokec2 as\cf4 \strokec4  \cf7 \strokec7 f\cf4 \strokec4 :\cb1 \
\cb3             \cf7 \strokec7 f\cf4 \strokec4 .\cf6 \strokec6 write\cf4 \strokec4 (\cf8 \strokec8 ""\cf4 \strokec4 .\cf6 \strokec6 join\cf4 \strokec4 (\cf7 \strokec7 lines\cf4 \strokec4 ))\cb1 \
\cb3         \cf6 \strokec6 print\cf4 \strokec4 (\cf8 \strokec8 "[\cf12 \strokec12 \{\}\cf8 \strokec8 ] CSV \cf12 \strokec12 \{\}\cf8 \strokec8  written!"\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf5 \strokec5 os\cf4 \strokec4 .\cf6 \strokec6 getpid\cf4 \strokec4 (), \cf7 \strokec7 csv_file\cf4 \strokec4 ))\cb1 \
\
\cb3     \cf2 \strokec2 except\cf4 \strokec4  \cf5 \strokec5 Exception\cf4 \strokec4  \cf2 \strokec2 as\cf4 \strokec4  \cf7 \strokec7 e\cf4 \strokec4 :\cb1 \
\cb3         \cf6 \strokec6 print\cf4 \strokec4 (\cf8 \strokec8 "========= EXCEPTION ========="\cf4 \strokec4 )\cb1 \
\cb3         \cf5 \strokec5 traceback\cf4 \strokec4 .\cf6 \strokec6 print_exc\cf4 \strokec4 ()\cb1 \
\cb3         \cf6 \strokec6 print\cf4 \strokec4 (\cf7 \strokec7 e\cf4 \strokec4 )\cb1 \
\cb3         \cf6 \strokec6 print\cf4 \strokec4 (\cf8 \strokec8 "============================="\cf4 \strokec4 )\cb1 \
\
\cb3     \cf2 \strokec2 return\cf4 \strokec4  \cf12 \strokec12 True\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf12 \cb3 \strokec12 async\cf4 \strokec4  \cf12 \strokec12 def\cf4 \strokec4  \cf6 \strokec6 get_certs_and_print\cf4 \strokec4 ():\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 async\cf4 \strokec4  \cf2 \strokec2 with\cf4 \strokec4  \cf5 \strokec5 aiohttp\cf4 \strokec4 .\cf5 \strokec5 ClientSession\cf4 \strokec4 (\cf7 \strokec7 conn_timeout\cf4 \strokec4 =\cf11 \strokec11 5\cf4 \strokec4 ) \cf2 \strokec2 as\cf4 \strokec4  \cf7 \strokec7 session\cf4 \strokec4 :\cb1 \
\cb3         \cf7 \strokec7 ctls\cf4 \strokec4  = \cf2 \strokec2 await\cf4 \strokec4  \cf5 \strokec5 certlib\cf4 \strokec4 .\cf6 \strokec6 retrieve_all_ctls\cf4 \strokec4 (\cf7 \strokec7 session\cf4 \strokec4 )\cb1 \
\cb3         \cf6 \strokec6 print\cf4 \strokec4 (\cf8 \strokec8 "Found \cf12 \strokec12 \{\}\cf8 \strokec8  CTLs..."\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf6 \strokec6 len\cf4 \strokec4 (\cf7 \strokec7 ctls\cf4 \strokec4 )))\cb1 \
\cb3         \cf2 \strokec2 for\cf4 \strokec4  \cf7 \strokec7 log\cf4 \strokec4  \cf2 \strokec2 in\cf4 \strokec4  \cf7 \strokec7 ctls\cf4 \strokec4 :\cb1 \
\cb3             \cf2 \strokec2 try\cf4 \strokec4 :\cb1 \
\cb3                 \cf7 \strokec7 log_info\cf4 \strokec4  = \cf2 \strokec2 await\cf4 \strokec4  \cf5 \strokec5 certlib\cf4 \strokec4 .\cf6 \strokec6 retrieve_log_info\cf4 \strokec4 (\cf7 \strokec7 log\cf4 \strokec4 , \cf7 \strokec7 session\cf4 \strokec4 )\cb1 \
\cb3             \cf2 \strokec2 except\cf4 \strokec4 :\cb1 \
\cb3                 \cf2 \strokec2 continue\cf4 \cb1 \strokec4 \
\
\cb3             \cf6 \strokec6 print\cf4 \strokec4 (\cf7 \strokec7 log\cf4 \strokec4 [\cf8 \strokec8 'description'\cf4 \strokec4 ])\cb1 \
\cb3             \cf6 \strokec6 print\cf4 \strokec4 (\cf8 \strokec8 "    \\- URL:            \cf12 \strokec12 \{\}\cf8 \strokec8 "\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf7 \strokec7 log\cf4 \strokec4 [\cf8 \strokec8 'url'\cf4 \strokec4 ]))\cb1 \
\cb3             \cf6 \strokec6 print\cf4 \strokec4 (\cf8 \strokec8 "    \\- Owner:          \cf12 \strokec12 \{\}\cf8 \strokec8 "\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf7 \strokec7 log_info\cf4 \strokec4 [\cf8 \strokec8 'operated_by'\cf4 \strokec4 ]))\cb1 \
\cb3             \cf6 \strokec6 print\cf4 \strokec4 (\cf8 \strokec8 "    \\- Cert Count:     \cf12 \strokec12 \{\}\cf8 \strokec8 "\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf5 \strokec5 locale\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf8 \strokec8 "\cf12 \strokec12 %d\cf8 \strokec8 "\cf4 \strokec4 , \cf7 \strokec7 log_info\cf4 \strokec4 [\cf8 \strokec8 'tree_size'\cf4 \strokec4 ]-\cf11 \strokec11 1\cf4 \strokec4 , \cf7 \strokec7 grouping\cf4 \strokec4 =\cf12 \strokec12 True\cf4 \strokec4 )))\cb1 \
\cb3             \cf6 \strokec6 print\cf4 \strokec4 (\cf8 \strokec8 "    \\- Max Block Size: \cf12 \strokec12 \{\}\cf13 \strokec13 \\n\cf8 \strokec8 "\cf4 \strokec4 .\cf6 \strokec6 format\cf4 \strokec4 (\cf7 \strokec7 log_info\cf4 \strokec4 [\cf8 \strokec8 'block_size'\cf4 \strokec4 ]))\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf12 \cb3 \strokec12 def\cf4 \strokec4  \cf6 \strokec6 main\cf4 \strokec4 ():\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf7 \strokec7 loop\cf4 \strokec4  = \cf5 \strokec5 asyncio\cf4 \strokec4 .\cf6 \strokec6 get_event_loop\cf4 \strokec4 ()\cb1 \
\
\cb3     \cf7 \strokec7 parser\cf4 \strokec4  = \cf5 \strokec5 argparse\cf4 \strokec4 .\cf5 \strokec5 ArgumentParser\cf4 \strokec4 (\cf7 \strokec7 description\cf4 \strokec4 =\cf8 \strokec8 'Pull down certificate transparency list information'\cf4 \strokec4 )\cb1 \
\
\cb3     \cf7 \strokec7 parser\cf4 \strokec4 .\cf6 \strokec6 add_argument\cf4 \strokec4 (\cf8 \strokec8 '-f'\cf4 \strokec4 , \cf7 \strokec7 dest\cf4 \strokec4 =\cf8 \strokec8 'log_file'\cf4 \strokec4 , \cf7 \strokec7 action\cf4 \strokec4 =\cf8 \strokec8 'store'\cf4 \strokec4 , \cf7 \strokec7 default\cf4 \strokec4 =\cf8 \strokec8 '/tmp/axeman.log'\cf4 \strokec4 ,\cb1 \
\cb3                     \cf7 \strokec7 help\cf4 \strokec4 =\cf8 \strokec8 'location for the axeman log file'\cf4 \strokec4 )\cb1 \
\
\cb3     \cf7 \strokec7 parser\cf4 \strokec4 .\cf6 \strokec6 add_argument\cf4 \strokec4 (\cf8 \strokec8 '-s'\cf4 \strokec4 , \cf7 \strokec7 dest\cf4 \strokec4 =\cf8 \strokec8 'start_offset'\cf4 \strokec4 , \cf7 \strokec7 action\cf4 \strokec4 =\cf8 \strokec8 'store'\cf4 \strokec4 , \cf7 \strokec7 default\cf4 \strokec4 =\cf11 \strokec11 0\cf4 \strokec4 ,\cb1 \
\cb3                         \cf7 \strokec7 help\cf4 \strokec4 =\cf8 \strokec8 'Skip N number of lists before starting'\cf4 \strokec4 )\cb1 \
\
\cb3     \cf7 \strokec7 parser\cf4 \strokec4 .\cf6 \strokec6 add_argument\cf4 \strokec4 (\cf8 \strokec8 '-l'\cf4 \strokec4 , \cf7 \strokec7 dest\cf4 \strokec4 =\cf8 \strokec8 "list_mode"\cf4 \strokec4 , \cf7 \strokec7 action\cf4 \strokec4 =\cf8 \strokec8 "store_true"\cf4 \strokec4 , \cf7 \strokec7 help\cf4 \strokec4 =\cf8 \strokec8 "List all available certificate lists"\cf4 \strokec4 )\cb1 \
\
\cb3     \cf7 \strokec7 parser\cf4 \strokec4 .\cf6 \strokec6 add_argument\cf4 \strokec4 (\cf8 \strokec8 '-u'\cf4 \strokec4 , \cf7 \strokec7 dest\cf4 \strokec4 =\cf8 \strokec8 "ctl_url"\cf4 \strokec4 , \cf7 \strokec7 action\cf4 \strokec4 =\cf8 \strokec8 "store"\cf4 \strokec4 , \cf7 \strokec7 default\cf4 \strokec4 =\cf12 \strokec12 None\cf4 \strokec4 , \cf7 \strokec7 help\cf4 \strokec4 =\cf8 \strokec8 "Retrieve this CTL only"\cf4 \strokec4 )\cb1 \
\
\cb3     \cf7 \strokec7 parser\cf4 \strokec4 .\cf6 \strokec6 add_argument\cf4 \strokec4 (\cf8 \strokec8 '-z'\cf4 \strokec4 , \cf7 \strokec7 dest\cf4 \strokec4 =\cf8 \strokec8 "ctl_offset"\cf4 \strokec4 , \cf7 \strokec7 action\cf4 \strokec4 =\cf8 \strokec8 "store"\cf4 \strokec4 , \cf7 \strokec7 default\cf4 \strokec4 =\cf11 \strokec11 0\cf4 \strokec4 , \cf7 \strokec7 help\cf4 \strokec4 =\cf8 \strokec8 "The CTL offset to start at"\cf4 \strokec4 )\cb1 \
\
\cb3     \cf7 \strokec7 parser\cf4 \strokec4 .\cf6 \strokec6 add_argument\cf4 \strokec4 (\cf8 \strokec8 '-o'\cf4 \strokec4 , \cf7 \strokec7 dest\cf4 \strokec4 =\cf8 \strokec8 "output_dir"\cf4 \strokec4 , \cf7 \strokec7 action\cf4 \strokec4 =\cf8 \strokec8 "store"\cf4 \strokec4 , \cf7 \strokec7 default\cf4 \strokec4 =\cf8 \strokec8 "/Users/bricelewis/Desktop/Certificats"\cf4 \strokec4 , \cf7 \strokec7 help\cf4 \strokec4 =\cf8 \strokec8 "The output directory to store certificates in"\cf4 \strokec4 )\cb1 \
\
\cb3     \cf7 \strokec7 parser\cf4 \strokec4 .\cf6 \strokec6 add_argument\cf4 \strokec4 (\cf8 \strokec8 '-v'\cf4 \strokec4 , \cf7 \strokec7 dest\cf4 \strokec4 =\cf8 \strokec8 "verbose"\cf4 \strokec4 , \cf7 \strokec7 action\cf4 \strokec4 =\cf8 \strokec8 "store_true"\cf4 \strokec4 , \cf7 \strokec7 help\cf4 \strokec4 =\cf8 \strokec8 "Print out verbose/debug info"\cf4 \strokec4 )\cb1 \
\
\cb3     \cf7 \strokec7 parser\cf4 \strokec4 .\cf6 \strokec6 add_argument\cf4 \strokec4 (\cf8 \strokec8 '-c'\cf4 \strokec4 , \cf7 \strokec7 dest\cf4 \strokec4 =\cf8 \strokec8 'concurrency_count'\cf4 \strokec4 , \cf7 \strokec7 action\cf4 \strokec4 =\cf8 \strokec8 'store'\cf4 \strokec4 , \cf7 \strokec7 default\cf4 \strokec4 =\cf11 \strokec11 50\cf4 \strokec4 , \cf7 \strokec7 type\cf4 \strokec4 =\cf5 \strokec5 int\cf4 \strokec4 , \cf7 \strokec7 help\cf4 \strokec4 =\cf8 \strokec8 "The number of concurrent downloads to run at a time"\cf4 \strokec4 )\cb1 \
\
\cb3     \cf7 \strokec7 args\cf4 \strokec4  = \cf7 \strokec7 parser\cf4 \strokec4 .\cf6 \strokec6 parse_args\cf4 \strokec4 ()\cb1 \
\
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf7 \strokec7 args\cf4 \strokec4 .list_mode:\cb1 \
\cb3         \cf7 \strokec7 loop\cf4 \strokec4 .\cf6 \strokec6 run_until_complete\cf4 \strokec4 (\cf6 \strokec6 get_certs_and_print\cf4 \strokec4 ())\cb1 \
\cb3         \cf2 \strokec2 return\cf4 \cb1 \strokec4 \
\
\cb3     \cf7 \strokec7 handlers\cf4 \strokec4  = [\cf5 \strokec5 logging\cf4 \strokec4 .\cf5 \strokec5 FileHandler\cf4 \strokec4 (\cf7 \strokec7 args\cf4 \strokec4 .log_file), \cf5 \strokec5 logging\cf4 \strokec4 .\cf5 \strokec5 StreamHandler\cf4 \strokec4 ()]\cb1 \
\
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf7 \strokec7 args\cf4 \strokec4 .verbose:\cb1 \
\cb3         \cf5 \strokec5 logging\cf4 \strokec4 .\cf6 \strokec6 basicConfig\cf4 \strokec4 (\cf7 \strokec7 format\cf4 \strokec4 =\cf8 \strokec8 '[\cf12 \strokec12 %(levelname)s\cf8 \strokec8 :\cf12 \strokec12 %(name)s\cf8 \strokec8 ] \cf12 \strokec12 %(asctime)s\cf8 \strokec8  - \cf12 \strokec12 %(message)s\cf8 \strokec8 '\cf4 \strokec4 , \cf7 \strokec7 level\cf4 \strokec4 =\cf5 \strokec5 logging\cf4 \strokec4 .\cf7 \strokec7 DEBUG\cf4 \strokec4 , \cf7 \strokec7 handlers\cf4 \strokec4 =\cf7 \strokec7 handlers\cf4 \strokec4 )\cb1 \
\cb3     \cf2 \strokec2 else\cf4 \strokec4 :\cb1 \
\cb3         \cf5 \strokec5 logging\cf4 \strokec4 .\cf6 \strokec6 basicConfig\cf4 \strokec4 (\cf7 \strokec7 format\cf4 \strokec4 =\cf8 \strokec8 '[\cf12 \strokec12 %(levelname)s\cf8 \strokec8 :\cf12 \strokec12 %(name)s\cf8 \strokec8 ] \cf12 \strokec12 %(asctime)s\cf8 \strokec8  - \cf12 \strokec12 %(message)s\cf8 \strokec8 '\cf4 \strokec4 , \cf7 \strokec7 level\cf4 \strokec4 =\cf5 \strokec5 logging\cf4 \strokec4 .\cf7 \strokec7 INFO\cf4 \strokec4 , \cf7 \strokec7 handlers\cf4 \strokec4 =\cf7 \strokec7 handlers\cf4 \strokec4 )\cb1 \
\
\cb3     \cf5 \strokec5 logging\cf4 \strokec4 .\cf6 \strokec6 info\cf4 \strokec4 (\cf8 \strokec8 "Starting..."\cf4 \strokec4 )\cb1 \
\
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf7 \strokec7 args\cf4 \strokec4 .ctl_url:\cb1 \
\cb3         \cf7 \strokec7 loop\cf4 \strokec4 .\cf6 \strokec6 run_until_complete\cf4 \strokec4 (\cf6 \strokec6 retrieve_certificates\cf4 \strokec4 (\cf7 \strokec7 loop\cf4 \strokec4 , \cf7 \strokec7 url\cf4 \strokec4 =\cf7 \strokec7 args\cf4 \strokec4 .ctl_url, \cf7 \strokec7 ctl_offset\cf4 \strokec4 =\cf5 \strokec5 int\cf4 \strokec4 (\cf7 \strokec7 args\cf4 \strokec4 .ctl_offset), \cf7 \strokec7 concurrency_count\cf4 \strokec4 =\cf7 \strokec7 args\cf4 \strokec4 .concurrency_count, \cf7 \strokec7 output_directory\cf4 \strokec4 =\cf7 \strokec7 args\cf4 \strokec4 .output_dir))\cb1 \
\cb3     \cf2 \strokec2 else\cf4 \strokec4 :\cb1 \
\cb3         \cf7 \strokec7 loop\cf4 \strokec4 .\cf6 \strokec6 run_until_complete\cf4 \strokec4 (\cf6 \strokec6 retrieve_certificates\cf4 \strokec4 (\cf7 \strokec7 loop\cf4 \strokec4 , \cf7 \strokec7 concurrency_count\cf4 \strokec4 =\cf7 \strokec7 args\cf4 \strokec4 .concurrency_count, \cf7 \strokec7 output_directory\cf4 \strokec4 =\cf7 \strokec7 args\cf4 \strokec4 .output_dir))\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 if\cf4 \strokec4  \cf7 \strokec7 __name__\cf4 \strokec4  == \cf8 \strokec8 "__main__"\cf4 \strokec4 :\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf6 \strokec6 main\cf4 \strokec4 ()\cb1 \
\
}